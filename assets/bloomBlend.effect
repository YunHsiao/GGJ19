%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
          blendSrc: one
          blendDst: oneMinusSrcAlpha
          blendSrcAlpha: one
          blendDstAlpha: oneMinusSrcAlpha
        }
      ]
      layer: 0
    }
  ]
  properties: {
    origin: {
      type: sampler2D
      value: null
    }
    blurred: {
      type: sampler2D
      value: null
    }
    vignette: {
      type: float 
      value: 0.5
    }
  }
%}

%% vs {
  uniform mat4 cc_matViewProj;
  uniform mat4 cc_matWorld;

  attribute vec3 a_position;
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;

  void main () {
    mat4 mvp = cc_matViewProj * cc_matWorld;
    v_uv0 = a_uv0;
    gl_Position = mvp * vec4(a_position, 1);
  }
}

%% fs {
  uniform sampler2D origin;
  uniform sampler2D blurred;

  uniform vec3 resolution; // x, y, x/y
  uniform float vignette;
  uniform float u_time;

  varying mediump vec2 v_uv0;
  
  #include <encodings>

  // Value Noise by Inigo Quilez - iq/2013
  // https://www.shadertoy.com/view/lsf3WH
  float random (in vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
  }
  vec2 random2 (vec2 st) {
    st = vec2(dot(st, vec2(127.1, 311.7)), dot(st, vec2(269.5, 183.3)));
    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);
  }
  float noise (vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(mix(dot(random2(i + vec2(0)), f - vec2(0)),
      dot(random2(i + vec2(1, 0)), f - vec2(1, 0)), u.x),
      mix(dot(random2(i + vec2(0, 1)), f - vec2(0, 1)),
      dot(random2(i + vec2(1, 1)), f - vec2(1, 1)), u.x), u.y);
  }

  float fbm (vec2 n) {
    float total = 0.0, amplitude = 1.0;
    for (int i = 0; i < 5; i++) {
      total += noise(n) * amplitude;
      n += n;
      amplitude *= 0.5;
    }
    return total;
  }

  void main () {
    vec2 uv = vec2(v_uv0.x, 1.0 - v_uv0.y);
    vec4 o = texture2D(origin, uv);
    vec4 b = texture2D(blurred, uv);

    vec2 st = uv - 0.5;
    st.x *= resolution.z;

    float shaft = 0.0, mask = 0.0;
    if (dot(b.rgb, b.rgb) < 0.7) {
      mask  = mix(mask,  1.0, fbm(vec2(st.x * 2.0  + u_time / 40.0 + 10.0  , st.y / 4.0)) * smoothstep(-0.5, 0.5, st.y));
      mask  = mix(mask,  1.0, fbm(vec2(st.x * 2.0  - u_time / 40.0 + 1000.0, st.y / 4.0)) * smoothstep(-0.5, 0.5, st.y));
      shaft = mix(mask,  1.0, fbm(vec2(st.x * 10.0 + u_time / 15.0,          st.y / 4.0)) * mask);
      shaft = mix(shaft, 1.0, fbm(vec2(st.x * 10.0 - u_time / 15.0 + 1000.0, st.y / 4.0)) * mask);
    }

    float rf = sqrt(dot(st * 2.0, st * 2.0)) * vignette;
    float rf2_1 = rf * rf + 1.0;
    float e = 1.0 / (rf2_1 * rf2_1);

    vec3 c = o.rgb + b.rgb + max(0.0, shaft);
    c /= c + vec3(1.0);
    gl_FragColor = LINEAR_TO_OUTPUT_TEXEL(vec4(c * e, 1));
  }
}
