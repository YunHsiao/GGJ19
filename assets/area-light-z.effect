
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: back
          depthTest: true
          depthWrite: true
        }
      ]
    }
  ]

  properties: {
    diffuseColor: {
      type: color4
      value: [0.2, 0.5, 0.5, 1]
    }
    center: {
      type: vec3
      value: [0, 8, 0]
    }
    size: {
      type: float
      value: 3
    }
    brightness: {
      type: float
      value: 1
    }
  }
%}

%% vs {
  #include <cc-global>
  #include <cc-local>
  #include <common-attribute>
  #include <skinning>

  varying vec3 v_worldNormal;
  varying vec3 v_worldPosition;
  varying vec3 v_localPosition;

  void main () {
    vec4 pos = vec4(a_position, 1);
    vec4 normal = vec4(a_normal, 0);

    SKIN_VERTEX(pos, normal);

    v_localPosition = cc_matWorldIT * a_position;
    v_worldPosition = (cc_matWorld * pos).xyz;
    v_worldNormal = cc_matWorldIT * normal.xyz;

    gl_Position = cc_matViewProj * cc_matWorld * pos;
  }
}

%% fs {
  #include <encodings>
  #include <rect-area-light>
  #include <cc-global>

  uniform vec4 diffuseColor;
  uniform vec3 center;
  uniform float size;
  uniform float brightness;

  varying vec3 v_worldNormal;
  varying vec3 v_worldPosition;
  varying vec3 v_localPosition;

  void main () {
    vec3 N = normalize(v_worldNormal);
    vec3 V = normalize(cc_cameraPos - v_worldPosition);

    vec3 points[4];
    points[0] = center + vec3( size,  size, 0);
    points[1] = center + vec3(-size,  size, 0);
    points[2] = center + vec3(-size, -size, 0);
    points[3] = center + vec3( size, -size, 0);

    #if USE_LOCAL_COORDS
      vec3 L = LTC_Evaluate(N, V, v_localPosition, mat3(1), points);
    #else
      vec3 L = LTC_Evaluate(N, V, v_worldPosition, mat3(1), points);
    #endif

    vec3 diffuse = diffuseColor.rgb * brightness * (0.2 + L * 0.8);
    gl_FragColor = LINEAR_TO_OUTPUT_TEXEL(vec4(diffuse, diffuseColor.a));
  }
}
